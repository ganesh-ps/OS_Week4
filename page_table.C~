#include "assert.H"
#include "exceptions.H"
#include "console.H"
#include "paging_low.H"
#include "page_table.H"

PageTable * PageTable::current_page_table = NULL;
unsigned int PageTable::paging_enabled = 0;
ContFramePool * PageTable::kernel_mem_pool = NULL;
ContFramePool * PageTable::process_mem_pool = NULL;
unsigned long PageTable::shared_size = 0;


void PageTable::init_paging(ContFramePool * _kernel_mem_pool,
                            ContFramePool * _process_mem_pool,
                            const unsigned long _shared_size)
{
   //assert(false);
   kernel_mem_pool = _kernel_mem_pool;
   process_mem_pool = _process_mem_pool;
   shared_size = _shared_size;
   Console::puts("Initialized Paging System\n");
}

PageTable::PageTable()
{
   //assert(false);
   paging_enabled = 0;
   unsigned long pg_dir_frame_no= (kernel_mem_pool->get_frames(1));
   page_directory = (unsigned long *) (pg_dir_frame_no*PAGE_SIZE);
   unsigned long pg_table_frame_no= (process_mem_pool->get_frames(1));
   unsigned long *page_table = (unsigned long *) (pg_table_frame_no*PAGE_SIZE); // the page table comes right after the page directory
   unsigned int i;
  // assert(pg_dir_frame_no);
   //assert(pg_table_frame_no);
  // fill the first entry of the page directory
  page_directory[1023]= (unsigned long)page_directory;
  page_directory[1023]= (unsigned long)page_directory | 0x00000003;
  
  page_directory[0] = (unsigned long)page_table; // attribute set to: supervisor level, read/write, present(011 in binary)
  page_directory[0] = (unsigned long)page_directory[0] | 3;
  for(i=1; i<1024; i++)
  {
    page_directory[i] = 0x00000000 | 0x00000002; // attribute set to: supervisor level, read/write, not present(010 in binary)
  }

   unsigned long address=0; // holds the physical address of where a page is
   for(int i=1; i<ENTRIES_PER_PAGE-1; i++)
   {
       page_directory[i] = 0x00000000 | 0x00000002 ;
   }
   // map the first 4MB of memory
   for(i=0; i<ENTRIES_PER_PAGE; i++)
   {
     page_table[i] = address | 0x00000003; // attribute set to: supervisor level, read/write, present(011 in binary)
     address = address + 4096; // 4096 = 4kb
   }
   Console::puts("Constructed Page Table object\n");
}


void PageTable::load()
{
   //assert(false);
   current_page_table=this;
   // write_cr3, read_cr3, write_cr0, and read_cr0 all come from the assembly functions`
   write_cr3((unsigned long)page_directory); // put that page directory address into CR3
   Console::puts("Loaded page table\n");
}

void PageTable::enable_paging()
{
   //assert(false);
   paging_enabled = 1;
   write_cr0(read_cr0() | 0x80000000); // set the paging bit in CR0 to 1
   Console::puts("Enabled paging\n");
}

void PageTable::handle_fault(REGS * _r)
{
  unsigned int err_code = _r->err_code; // get the error code

  //check if the error code is a page fault because of a page not present
  if( (err_code & 0x00000001) != 0x00000000 ) {
      Console::puts("\n Memory protection error, we don't handle that yet......exiting..... \n");
      assert(false);
  }

  unsigned long faulting_address = read_cr2();


  unsigned long page_directory_lookup_value = (faulting_address & 0xFFC00000) >> 22; // get the page table page address
  unsigned long page_table_lookup_value =  ( (faulting_address & 0x003FF000) >>12 ) ; // get the page table entry lookup address

   unsigned long        * page_table; // the page table page

   unsigned long    *page_directory_pd= current_page_table->page_directory;
  // first check if there's a fault in the page directory

  if( ( page_directory_pd[page_directory_lookup_value] & 0x00000001) != 0x00000001) { //check if the page is present

      unsigned long frame =  ( process_mem_pool->get_frames(1));
      page_table = (unsigned long *) (  frame * PAGE_SIZE );
      unsigned long *pd_recursive = (unsigned long *) ( (0x000003FF << 22) | (0x000003FF << 12) );
      pd_recursive[page_directory_lookup_value] = (unsigned long)page_table;
      pd_recursive[page_directory_lookup_value]= pd_recursive[page_directory_lookup_value] | 0x00000003;

  }
   //There's a fault in the page table page
  else  {
       page_table = (unsigned long *) ( page_directory_pd[page_directory_lookup_value] & 0xFFFFF000 ); //take off the last 12 bits
       unsigned long frame =  ( process_mem_pool->get_frames(1) * PAGE_SIZE );
       unsigned long *pt_recursive= (unsigned long *) ( (0x000003FF << 22) | (page_directory_lookup_value << 12) );
       pt_recursive[page_table_lookup_value] = frame | 0x00000003;
  }

  Console::puts("handled page fault\n");
}

void PageTable::register_pool(VMPool * _vm_pool)
{
    assert(false);
    Console::puts("registered VM pool\n");
}

void PageTable::free_page(unsigned long _page_no) {
    assert(false);
    Console::puts("freed page\n");
}


